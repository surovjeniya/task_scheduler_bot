version: "3.8"

# networks
networks:
  elk:
    name: $ELK_NETWORK_NAME
    driver: bridge
  infra:
    name: $INFRA_NETWORK_NAME
    driver: bridge
# volumes
volumes:
  kibana:
    name: $KIBANA_VOLUME_NAME
    driver: local
  elasticsearch:
    name: $ELASTICSEARCH_VOLUME_NAME
    driver: local
  cache:
    name: $CACHE_VOLUME_NAME
    driver: local
  db:
    name: $DB_VOLUME_NAME
    driver: local

# services
services:
  # elasticsearch-service
  elasticsearch-service:
    hostname: $ELASTICSEARCH_SERVICE_HOSTNAME
    image: $ELASTICSEARCH_SERVICE_IMAGE
    container_name: $ELASTICSEARCH_SERVICE_CONTAINER_NAME
    ports:
      - "$ELASTICSEARCH_SERVICE_PORT:$ELASTICSEARCH_SERVICE_PORT"
    environment:
      - discovery.type=single-node
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elk
    mem_limit: 1g
    restart: unless-stopped

  logstash-service:
    hostname: $LOGSTASH_SERVICE_HOSTNAME
    image: $LOGSTASH_SERVICE_IMAGE
    ports:
      - "$LOGSTASH_SERVICE_PORT:$LOGSTASH_SERVICE_PORT"
    container_name: $LOGSTASH_SERVICE_CONTAINER_NAME
    networks:
      - elk
    mem_limit: 1g
    volumes:
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    depends_on:
      - elasticsearch-service
      - kibana-service

  # kibana-service
  kibana-service:
    hostname: $KIBANA_SERVICE_HOSTNAME
    image: $KIBANA_SERVICE_IMAGE
    ports:
      - "$KIBANA_SERVICE_PORT:$KIBANA_SERVICE_PORT"
    depends_on:
      - elasticsearch-service
    container_name: $KIBANA_SERVICE_CONTAINER_NAME
    networks:
      - elk
    volumes:
      - kibana:/usr/share/kibana/data
    mem_limit: 1g
    environment:
      - ELASTICSEARCH_HOSTS=http://$ELASTICSEARCH_SERVICE_HOSTNAME:$ELASTICSEARCH_SERVICE_PORT
    restart: unless-stopped

  # cache-service
  cache-service:
    hostname: $CACHE_SERVICE_HOSTNAME
    image: $CACHE_SERVICE_IMAGE
    container_name: $CACHE_SERVICE_CONTAINER_NAME
    volumes:
      - cache:/data
    ports:
      - "$CACHE_SERVICE_PORT:$CACHE_SERVICE_PORT"
    restart: unless-stopped
    networks:
      - infra

  # db-service
  db-service:
    hostname: $DB_SERVICE_HOSTNAME
    image: $DB_SERVICE_IMAGE
    container_name: $DB_SERVICE_CONTAINER_NAME
    environment:
      POSTGRES_DB: $DB_SERVICE_DB
      POSTGRES_USER: $DB_SERVICE_USER
      POSTGRES_PASSWORD: $DB_SERVICE_PASSWORD
      PGDATA: $DB_SERVICE_DATA
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - "$DB_SERVICE_PORT:$DB_SERVICE_PORT"
    restart: unless-stopped
    networks:
      - infra

  # app-service-prod
  app-service-prod:
    hostname: $APP_SERVICE_HOSTNAME_PROD
    image: $APP_SERVICE_IMAGE
    container_name: $APP_SERVICE_CONTAINER_NAME
    build:
      context: "../app"
      dockerfile: Dockerfile
      target: production
    profiles: ["$PRODUCTION_PROFILE"]
    restart: unless-stopped
    networks:
      - infra
      - elk
    depends_on:
      - db-service
      - elasticsearch-service
      - kibana-service
      - logstash-service
      - cache-service
    ports:
      - "$APP_SERVICE_PORT:$APP_SERVICE_PORT"

  # app-service-dev
  app-service-dev:
    hostname: $APP_SERVICE_HOSTNAME_DEV
    image: $APP_SERVICE_IMAGE
    container_name: $APP_SERVICE_CONTAINER_NAME
    build:
      context: "../app"
      dockerfile: Dockerfile
      target: development
    profiles: ["$DEVELOPMENT_PROFILE"]
    command: npm run start:dev
    restart: unless-stopped
    networks:
      - infra
      - elk
    depends_on:
      - db-service
      - elasticsearch-service
      - kibana-service
      - logstash-service
      - cache-service
    ports:
      - "$APP_SERVICE_PORT:$APP_SERVICE_PORT"
    volumes:
      - ../app:/usr/src/app
